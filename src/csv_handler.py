"""M√≥dulo para manipula√ß√£o de arquivos CSV.

Este m√≥dulo fornece funcionalidades para leitura e escrita de arquivos CSV,
especificamente para credenciais e resultados de valida√ß√£o.
Segue as diretrizes estabelecidas no GEMINI.md.
"""

import csv
import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional

# Configura√ß√£o do logger para este m√≥dulo
logger = logging.getLogger(__name__)


class CSVHandler:
    """Manipulador de arquivos CSV para credenciais e resultados.

    Esta classe encapsula todas as opera√ß√µes de leitura e escrita
    de arquivos CSV relacionados √† valida√ß√£o de credenciais.
    """

    def __init__(self, encoding: str = "utf-8") -> None:
        """Inicializa o manipulador de CSV.

        Args:
            encoding (str): Codifica√ß√£o de caracteres para os arquivos CSV.
        """
        self.encoding = encoding
        logger.debug(f"CSVHandler inicializado com encoding: {encoding}")

    def ler_credenciais(self, caminho_arquivo: str) -> List[Dict[str, str]]:
        """L√™ credenciais de um arquivo CSV.

        O arquivo deve conter as colunas 'username' e 'password'.

        Args:
            caminho_arquivo (str): Caminho para o arquivo CSV contendo as credenciais.

        Returns:
            List[Dict[str, str]]: Lista de dicion√°rios com as credenciais.
                Cada dicion√°rio cont√©m 'username', 'password' e 'linha_original'.

        Raises:
            FileNotFoundError: Se o arquivo n√£o foi encontrado.
            ValueError: Se o arquivo n√£o possui as colunas 'username' e 'password'.
            PermissionError: Se n√£o h√° permiss√£o para ler o arquivo.
        """
        caminho = Path(caminho_arquivo)

        if not caminho.exists():
            raise FileNotFoundError(f"Arquivo n√£o encontrado: {caminho_arquivo}")

        if not caminho.is_file():
            raise ValueError(f"Caminho n√£o √© um arquivo: {caminho_arquivo}")

        logger.info(f"Lendo credenciais do arquivo: {caminho_arquivo}")

        credenciais = []
        linhas_ignoradas = 0

        try:
            with open(caminho, "r", encoding=self.encoding, newline="") as arquivo:
                reader = csv.DictReader(arquivo)

                # Verifica se as colunas necess√°rias existem
                if not reader.fieldnames:
                    raise ValueError("Arquivo CSV est√° vazio ou n√£o possui cabe√ßalho")

                if "username" not in reader.fieldnames:
                    raise ValueError(
                        f"Coluna 'username' n√£o encontrada. "
                        f"Colunas dispon√≠veis: {list(reader.fieldnames)}"
                    )

                if "password" not in reader.fieldnames:
                    raise ValueError(
                        f"Coluna 'password' n√£o encontrada. "
                        f"Colunas dispon√≠veis: {list(reader.fieldnames)}"
                    )

                # L√™ as credenciais linha por linha
                for linha_num, linha in enumerate(
                    reader, start=2
                ):  # start=2 porque linha 1 √© o cabe√ßalho
                    usuario = linha.get("username", "").strip()
                    senha = linha.get("password", "").strip()

                    # Valida apenas linhas com username E password preenchidos
                    if usuario and senha and usuario != "" and senha != "":
                        # Valida√ß√µes adicionais
                        if len(usuario) < 3:
                            linhas_ignoradas += 1
                            logger.warning(
                                f"‚ö†Ô∏è  Linha {linha_num} ignorada: username muito curto (m√≠nimo 3 caracteres)"
                            )
                            continue

                        if len(senha) < 1:
                            linhas_ignoradas += 1
                            logger.warning(
                                f"‚ö†Ô∏è  Linha {linha_num} ignorada: password vazio"
                            )
                            continue

                        # Ignora passwords que s√£o placeholders
                        if senha in [
                            "[NOT_SAVED]",
                            "[REDACTED]",
                            "[HIDDEN]",
                            "N/A",
                            "NULL",
                        ]:
                            linhas_ignoradas += 1
                            logger.warning(
                                f"‚ö†Ô∏è  Linha {linha_num} ignorada: password √© placeholder ({senha})"
                            )
                            continue

                        credenciais.append(
                            {
                                "username": usuario,
                                "password": senha,
                                "linha_original": linha_num,
                            }
                        )
                        logger.debug(
                            f"‚úÖ Linha {linha_num}: {usuario} - credencial v√°lida carregada"
                        )
                    else:
                        linhas_ignoradas += 1
                        motivos = []
                        if not usuario or usuario == "":
                            motivos.append("username vazio ou ausente")
                        if not senha or senha == "":
                            motivos.append("password vazio ou ausente")

                        logger.warning(
                            f"‚ö†Ô∏è  Linha {linha_num} ignorada: {', '.join(motivos)}"
                        )

            logger.info(
                f"üìä Carregadas {len(credenciais)} credenciais v√°lidas do arquivo"
            )
            if linhas_ignoradas > 0:
                logger.warning(
                    f"‚ö†Ô∏è  Total de {linhas_ignoradas} linhas ignoradas por dados incompletos"
                )

            return credenciais

        except PermissionError as e:
            logger.error(f"Sem permiss√£o para ler o arquivo: {caminho_arquivo}")
            raise
        except UnicodeDecodeError as e:
            logger.error(f"Erro de codifica√ß√£o ao ler arquivo: {str(e)}")
            raise ValueError(
                f"Erro de codifica√ß√£o no arquivo. Tente usar encoding diferente."
            )
        except Exception as e:
            logger.error(f"Erro inesperado ao ler arquivo CSV: {str(e)}")
            raise

    def salvar_resultados(
        self,
        resultados: List[Dict[str, Any]],
        caminho_saida: str,
        incluir_senha: bool = False,
    ) -> None:
        """Salva os resultados da valida√ß√£o em um arquivo CSV.

        Args:
            resultados (List[Dict[str, Any]]): Resultados da valida√ß√£o.
                Cada item deve conter pelo menos: username, is_valid.
            caminho_saida (str): Caminho para salvar o arquivo de resultados.
            incluir_senha (bool): Se True, inclui a senha no arquivo de sa√≠da.
                ATEN√á√ÉO: N√£o recomendado por quest√µes de seguran√ßa.

        Raises:
            ValueError: Se a lista de resultados est√° vazia.
            PermissionError: Se n√£o h√° permiss√£o para escrever no arquivo.
        """
        if not resultados:
            raise ValueError("Lista de resultados n√£o pode estar vazia")

        # Cria o diret√≥rio pai se n√£o existir
        caminho = Path(caminho_saida)
        caminho.parent.mkdir(parents=True, exist_ok=True)

        logger.info(f"Salvando {len(resultados)} resultados em: {caminho_saida}")

        try:
            with open(caminho, "w", encoding=self.encoding, newline="") as arquivo:
                # Define as colunas do arquivo de sa√≠da
                fieldnames = ["username", "is_valid", "error"]
                if incluir_senha:
                    fieldnames.insert(1, "password")  # Adiciona ap√≥s username

                writer = csv.DictWriter(arquivo, fieldnames=fieldnames)
                writer.writeheader()

                for resultado in resultados:
                    linha_saida = {
                        "username": resultado.get("username", ""),
                        "is_valid": resultado.get("is_valid", False),
                        "error": resultado.get("error", ""),
                    }

                    if incluir_senha:
                        linha_saida["password"] = resultado.get("password", "")

                    writer.writerow(linha_saida)

            logger.info(f"Resultados salvos com sucesso em: {caminho_saida}")

            if incluir_senha:
                logger.warning(
                    "ATEN√á√ÉO: Senhas foram inclu√≠das no arquivo de sa√≠da. "
                    "Considere quest√µes de seguran√ßa."
                )

        except PermissionError as e:
            logger.error(f"Sem permiss√£o para escrever no arquivo: {caminho_saida}")
            raise
        except Exception as e:
            logger.error(f"Erro inesperado ao salvar resultados: {str(e)}")
            raise

    def validar_estrutura_csv(
        self, caminho_arquivo: str, colunas_obrigatorias: List[str] = None
    ) -> Dict[str, Any]:
        """Valida a estrutura de um arquivo CSV.

        Args:
            caminho_arquivo (str): Caminho para o arquivo CSV.
            colunas_obrigatorias (List[str], optional): Lista de colunas que devem existir.
                Se None, usa ['username', 'password'] como padr√£o.

        Returns:
            Dict[str, Any]: Informa√ß√µes sobre a estrutura do arquivo:
                - valido (bool): Se a estrutura √© v√°lida
                - colunas_encontradas (List[str]): Colunas encontradas no arquivo
                - colunas_faltantes (List[str]): Colunas obrigat√≥rias n√£o encontradas
                - total_linhas (int): Total de linhas no arquivo (excluindo cabe√ßalho)
                - erro (str): Mensagem de erro se houver
        """
        # Define colunas padr√£o se n√£o fornecidas
        if colunas_obrigatorias is None:
            colunas_obrigatorias = ["username", "password"]

        resultado = {
            "valido": False,
            "colunas_encontradas": [],
            "colunas_faltantes": [],
            "total_linhas": 0,
            "erro": None,
        }

        try:
            caminho = Path(caminho_arquivo)

            if not caminho.exists():
                resultado["erro"] = f"Arquivo n√£o encontrado: {caminho_arquivo}"
                return resultado

            with open(caminho, "r", encoding=self.encoding, newline="") as arquivo:
                reader = csv.DictReader(arquivo)

                if not reader.fieldnames:
                    resultado["erro"] = "Arquivo CSV est√° vazio ou n√£o possui cabe√ßalho"
                    return resultado

                resultado["colunas_encontradas"] = list(reader.fieldnames)
                resultado["colunas_faltantes"] = [
                    col for col in colunas_obrigatorias if col not in reader.fieldnames
                ]

                # Conta o n√∫mero de linhas
                resultado["total_linhas"] = sum(1 for _ in reader)

                # Arquivo √© v√°lido se n√£o h√° colunas faltantes
                resultado["valido"] = len(resultado["colunas_faltantes"]) == 0

                if not resultado["valido"]:
                    resultado["erro"] = (
                        f"Colunas obrigat√≥rias n√£o encontradas: {resultado['colunas_faltantes']}"
                    )

        except Exception as e:
            resultado["erro"] = f"Erro ao validar estrutura: {str(e)}"
            logger.error(resultado["erro"])

        return resultado

    def criar_template_csv(
        self,
        caminho_arquivo: str,
        colunas: List[str] = None,
        dados_exemplo: Optional[List[Dict[str, str]]] = None,
    ) -> None:
        """Cria um arquivo CSV template com as colunas especificadas.

        Args:
            caminho_arquivo (str): Caminho onde criar o arquivo template.
            colunas (List[str], optional): Lista de nomes das colunas.
                Se None, usa ['username', 'password'] como padr√£o.
            dados_exemplo (Optional[List[Dict[str, str]]]): Dados de exemplo
                para incluir no template.
        """
        # Define colunas padr√£o se n√£o fornecidas
        if colunas is None:
            colunas = ["username", "password"]

        caminho = Path(caminho_arquivo)
        caminho.parent.mkdir(parents=True, exist_ok=True)

        logger.info(f"Criando template CSV em: {caminho_arquivo}")

        try:
            with open(caminho, "w", encoding=self.encoding, newline="") as arquivo:
                writer = csv.DictWriter(arquivo, fieldnames=colunas)
                writer.writeheader()

                if dados_exemplo:
                    for linha in dados_exemplo:
                        writer.writerow(linha)

            logger.info(f"Template CSV criado com sucesso: {caminho_arquivo}")

        except Exception as e:
            logger.error(f"Erro ao criar template CSV: {str(e)}")
            raise

    def _remover_duplicatas(
        self, resultados: List[Dict[str, Any]]
    ) -> List[Dict[str, Any]]:
        """Remove duplicatas baseado em username + password.

        Args:
            resultados: Lista de resultados com poss√≠veis duplicatas

        Returns:
            Lista de resultados √∫nicos (primeira ocorr√™ncia mantida)
        """
        vistos = set()
        resultados_unicos = []
        duplicatas_removidas = 0

        for resultado in resultados:
            username = resultado.get("username", "")
            password = resultado.get("password", "")
            chave_unica = (username, password)

            if chave_unica not in vistos:
                vistos.add(chave_unica)
                resultados_unicos.append(resultado)
            else:
                duplicatas_removidas += 1
                logger.debug(f"üîÑ Duplicata removida: {username}")

        if duplicatas_removidas > 0:
            logger.info(f"üîÑ Removidas {duplicatas_removidas} duplicatas")

        return resultados_unicos

    def salvar_resultados_json(
        self,
        resultados: List[Dict[str, Any]],
        caminho_saida: str,
        nome_arquivo_origem: str,
    ) -> None:
        """Salva os resultados da valida√ß√£o em um arquivo JSON organizado.

        Args:
            resultados (List[Dict[str, Any]]): Resultados da valida√ß√£o.
            caminho_saida (str): Caminho para salvar o arquivo JSON.
            nome_arquivo_origem (str): Nome do arquivo CSV original.
        """
        if not resultados:
            raise ValueError("Lista de resultados n√£o pode estar vazia")

        # Cria o diret√≥rio pai se n√£o existir
        caminho = Path(caminho_saida)
        caminho.parent.mkdir(parents=True, exist_ok=True)

        # Remove duplicatas baseado em username + password
        resultados_unicos = self._remover_duplicatas(resultados)

        logger.info(
            f"Salvando {len(resultados_unicos)} resultados √∫nicos em JSON: {caminho_saida}"
        )

        # Separa resultados por status
        validados_sucesso = []
        validados_erro = []

        for resultado in resultados_unicos:
            item = {
                "username": resultado.get("username", ""),
                "password": resultado.get("password", ""),
                "timestamp": datetime.now().isoformat(),
                "linha_original": resultado.get("linha_original", 0),
            }

            if resultado.get("is_valid", False):
                validados_sucesso.append(item)
            else:
                item["erro"] = resultado.get("error", "Credenciais inv√°lidas")
                validados_erro.append(item)

        # Estrutura do JSON final
        relatorio = {
            "metadata": {
                "arquivo_origem": nome_arquivo_origem,
                "data_processamento": datetime.now().isoformat(),
                "total_processados": len(resultados_unicos),
                "total_validos": len(validados_sucesso),
                "total_invalidos": len(validados_erro),
                "taxa_sucesso": (
                    f"{(len(validados_sucesso)/len(resultados_unicos)*100):.1f}%"
                    if resultados_unicos
                    else "0%"
                ),
            },
            "resultados": {
                "validados_com_sucesso": validados_sucesso,
                "validados_com_erro": validados_erro,
            },
        }

        try:
            with open(caminho, "w", encoding=self.encoding) as arquivo:
                json.dump(relatorio, arquivo, indent=2, ensure_ascii=False)

            logger.info(f"Relat√≥rio JSON salvo com sucesso: {caminho_saida}")
            logger.info(
                f"Resumo: {len(validados_sucesso)} sucessos, {len(validados_erro)} erros"
            )
            logger.warning(
                "ATEN√á√ÉO: O arquivo JSON cont√©m senhas em texto claro. Mantenha-o seguro!"
            )

        except Exception as e:
            logger.error(f"Erro inesperado ao salvar JSON: {str(e)}")
            raise

    def remover_arquivo_csv(self, caminho_arquivo: str) -> bool:
        """Remove arquivo CSV ap√≥s processamento.

        Args:
            caminho_arquivo: Caminho do arquivo a ser removido

        Returns:
            bool: True se removido com sucesso, False caso contr√°rio
        """
        try:
            arquivo_path = Path(caminho_arquivo)
            if arquivo_path.exists():
                arquivo_path.unlink()
                logger.info(f"üóëÔ∏è  Arquivo CSV removido: {arquivo_path.name}")
                return True
            else:
                logger.warning(
                    f"‚ö†Ô∏è  Arquivo n√£o encontrado para remo√ß√£o: {caminho_arquivo}"
                )
                return False
        except Exception as e:
            logger.error(f"‚ùå Erro ao remover arquivo CSV: {e}")
            return False


def criar_csv_handler(encoding: str = "utf-8") -> CSVHandler:
    """Factory function para criar uma inst√¢ncia do manipulador CSV.

    Args:
        encoding (str): Codifica√ß√£o de caracteres para os arquivos CSV.

    Returns:
        CSVHandler: Inst√¢ncia configurada do manipulador.
    """
    logger.debug("Criando nova inst√¢ncia do CSVHandler")
    return CSVHandler(encoding=encoding)
